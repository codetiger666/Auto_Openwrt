# This is a basic workflow to help you get started with Actions

name: Build_Openwrt_XIOAMI_AC2100

# The type of start
on:

  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'false'
  #push:
  #  branches: [ main ]
  # pull_request:
  #   branches: [ main ]

env:
  env:
  CONFIG_FILE: xiaomi_ac2100.config
  DRIVE_LABLE: xiaomi_ac2100
  UPLOAD_RELEASE: true
  UPLOAD_FIRMWARE: true
  UPLOAD_BIN_DIR: false
  REMOVE_OLD_RELEASE: true
  REMOVE_WORKFLOW_RUNS: true
  VERSION: '24.10'

# define workflow
jobs:
  build:
    runs-on: ubuntu-20.04

    # define steps
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          curl https://raw.githubusercontent.com/codetiger666/linux/refs/heads/master/scripts/linux/init-github-ubuntu | bash
          version=$VERSION
          # tag=$(echo $release | awk -F "." '{print$2}')
          tag=$VERSION
          KERNEL_HASH=`curl https://downloads.openwrt.org/releases/$VERSION/targets/ramips/mt7621/openwrt-$VERSION-ramips-mt7621.manifest | grep kernel | awk -F "-" '{print $4}'`
          echo "export openwrt_tag=$VERSION" >> .profile
          echo "export DRIVE_LABLE=$DRIVE_LABLE" >> .profile
          echo "export KERNEL_HASH=$KERNEL_HASH" >> .profile
          source .profile
      - name: Clone Openwrt source code
        run: |
          git clone -b $VERSION https://github.com/codetiger666/openwrt.git openwrt
      - name: Update & Install Feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Run Diy-Part1 Scripts
        run: |
          source scripts/BaseScripts.sh
          source $HOME/.profile
          Core_Xiaomi_Ac2100
          Diy-Part1
          # Diy-Part1-newifiD2
          echo "Artifacts_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
      - name: make defconfig
        run: |
          [ -f $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
          cd openwrt
          make defconfig
      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@main
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download Packages
        working-directory: ./openwrt
        run: |
          make download -j V=s
      - name: Compile the Openwrt
        working-directory: ./openwrt
        run: |
          make -j4 V=s

      - name: Recompile the Openwrt 
        working-directory: ./openwrt
        if: failure()
        run: |
          make -j1 V=s

      - name: Upload Firmware to Artifacts
        uses: actions/upload-artifact@main
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        with:
          name: OpenWrt_Firmware_${{ env.Artifacts_DATE }}
          path: openwrt/bin
          
      - name: copy file to Releases
        working-directory: ./openwrt
        run: |
          source ../scripts/BaseScripts.sh
          Diy-Part2_xiaomi_ac2100

      - name: Remove old Releases
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        if: env.REMOVE_OLD_RELEASE == 'true' && !cancelled()
        with:
          tag_name: openwrt_xiaomi_ac2100 #(required) tag name to delete 
          delete_release: true #(optional) default: true 
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          
      - name: Upload Firmware to Releases
        uses: softprops/action-gh-release@v1
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        with:
          tag_name: openwrt_xiaomi_ac2100
          files: openwrt/bin/Firmware/*

      - name: Remove workflow runs
        uses: GitRML/delete-workflow-runs@main
        if: env.REMOVE_WORKFLOW_RUNS == 'true' && !cancelled()
        with:
          retain_days: 1
          keep_minimum_runs: 3

      - name: SSH connection to Actions1
        uses: P3TERX/ssh2actions@main
        if: failure()
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
